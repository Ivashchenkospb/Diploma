load "iovtk"
load "pipe"
load "MUMPS_seq"
include "gnuplotInterface.edp"

real L = 3000.0; /* [m] */
real H = 2000.0; /* [m] */
real Lfrac = 200.0; /* [m] */
real kr = 1.0*1e-14; /* [m^2], Reservoir permeability */
real kf = kr*1e5; /* [m^2], Fracture permeability */
real mu = 1.0*1e-3; /* [Pa*s], Reservoir and fracture fluid viscosity */
real fiPorosity = 0.2; /* [], Porosity */
real E = 20.0*1e9; /* [Pa], Young modulus */
real nu = 0.21; /* [], Poisson coef */
real alpha = 1.0; /* [], Biot coef */
real lambda=E*nu/(1.0+nu)/(1.0-2*nu); /* [Pa], Lame coef */
real G=E/2.0/(1.0+nu); /* [Pa], Lame coef */
real PP=lambda+2.0*G;
// real Seps = ((alpha-fiPorosity)*(1-alpha))/(lambda+2*G/3); /* [Pa^-1], Storativity */
// real Q = 14*1e-5; /* [m^2/s] Injection per unit height (height = 50 m) */
real Q = 11.0*1e-5; /* [m^2/s] Injection per unit height (height = 50 m) */
real p0 = 32.4*1e6; /* [Pa], Outer pressure */
real dt = 3600.0; /* [s], Timestep */
real tMax = 86400.0; /* [s], Maximal time */
real KIc = 1.73*1e6; /* [Pa*m^0.5] Fracture toughness */
real Ct = 1.0e-10; /* [Pa^-1], Compressibility */

int NN = 10;

int labelB = 1; /* Bottom */
int labelR = 2; /* Right hand side of domain */
int labelT = 3; /* Top of domain */
int labelL = 4; /* Left hand side of domain */

real[int] xP = [0.0, L, L, 0.0]; /* enumeration of xcoords */
real[int] yP = [0.0, 0.0, H, H]; /* enumeration of ycoords */

int[int] nGamma = [1, H/L, 1, H/L] * NN; /* number of mesh parts on fracture, on the rest of bottom, etc. */
// int[int] nGamma = [10*1, H/L, L/L, 10*H/L] * NN; /* number of mesh parts on fracture, on the rest of bottom, etc. */

int[int] labelGamma = [labelB, labelR, labelT, labelL];

border GammaDomain(t = 0.0, 1.0; i)
{
    int iNext = (i+1) % nGamma.n;

    x = xP[i]*(1-t) + xP[iNext]*t;
    y = yP[i]*(1-t) + yP[iNext]*t;
    label = labelGamma[i];
}

mesh Th = buildmesh(GammaDomain(nGamma));

real hMeshFiltr = H/1.5;
real lMeshFiltr = L/1.5;
for(int i = 0; i < 8; i++){
    hMeshFiltr /= 2.0;
    lMeshFiltr /= 1.2;
    Th = splitmesh(Th, 1 + 1*((x <= lMeshFiltr)*(y <= hMeshFiltr)));
    cout << "New mesh   " << "Nt = " << Th.nt << "  Nv = " << Th.nv << endl;
}

fespace Vh(Th, P2);
Vh f = 1.0;
int[int] order = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
// savevtk(".FiltrationMesh.vtu", Th, f, dataname = "f", order=order);
Vh p, phi;
Vh pOld;
Vh RHSQ;
pOld = p0;

Vh psi, khi;
Vh RHS = alpha*(p-p0)/PP;
Vh psix, psiy, psixx, psiyy, psixy, psiyx;
Vh deltaSx, deltaSxTot, deltaSy, deltaSyTot, deltaSxy;

Vh sigmaB = 0.0;

macro grad(p)[dx(p), dy(p)] // EOM

real[int] xdelta = [0.0]; // coord x of point source
real[int] ydelta = [0.0]; // coord y of point source
real[int] cdelta=[dt*Q];  // value of point source
matrix D = interpolate(Vh, xdelta, ydelta); // the interpolation matrix
RHSQ[] = D*cdelta;

varf FiltrationBilinearForm(p, phi) = 
    int2d(Th)(fiPorosity*Ct*p*phi) 
    + int2d(Th)((dt*kr/mu)*grad(p)'*grad(phi)) 
    + int1d(Th, labelB)((dt*kf/mu)*dx(p)*dx(phi)*(x <= Lfrac))
    + on(labelT, p = p0)
    + on(labelR, p = p0);

varf FiltrationLinearForm(p, phi) = 
    int2d(Th)(fiPorosity*Ct*pOld*phi)
    + RHSQ[]
    + on(labelT, p = p0)
    + on(labelR, p = p0);

varf BackstressBilinearForm(psi, khi) = 
    int2d(Th)(grad(psi)'*grad(khi))
    + on(labelR, psi=0)
    + on(labelT, psi=0);

varf BackstressLinearForm(psi, khi)=
    - int2d(Th)(RHS*khi)
    + on(labelR, psi=0)
    + on(labelT, psi=0);

// int[int] order = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
int i = 0;
real t = 0.0;
real fracPressure = 0.0;

matrix BB = BackstressBilinearForm(Vh, Vh);

{
    // ofstream f1save("Results/fracpressure1.txt");
    // ofstream f2save("Results/fracpressure2.txt");
    while(t < tMax){
        cout << "t = " << t << endl;
        matrix A = FiltrationBilinearForm(Vh, Vh);
        set(A, solver = sparsesolver);
        real[int] b = FiltrationLinearForm(0, Vh);
        p[] = A^-1*b;
        fracPressure = int1d(Th, labelB)(p*(x <= Lfrac))/Lfrac;

        // f1save << t << "\t" << fracPressure << "\n";
        // f2save << t << "\t" << fracPressure << "\n";

        RHS = alpha*(p-pOld)/PP;
        real[int] bB = BackstressLinearForm(0, Vh);
        psi[] = BB^-1*bB;
        psix = dx(psi);
        psiy = dy(psi);
        psixx = dx(psix);
        psiyy = dy(psiy);
        deltaSy = lambda*(psixx+psiyy)+2*G*psiyy;
        deltaSyTot = deltaSy-alpha*(p-pOld);
        sigmaB = sigmaB + deltaSyTot;

        pOld = p;
        t = t + dt;
        i = i + 1;
        savevtk("./Results/FracGrowthNewMesh" + i + ".vtu", Th, p, sigmaB, dataname = "p Backstress", order=order);
        }
}