include "Parameters.edp"

int NN = 50;

int labelF = 1; /* fracture */
int labelB = 2; /* Bottom */
int labelR = 3; /* Right hand side of domain */
int labelT = 4; /* Top of domain */
int labelL = 5; /* Left hand side of domain */

real[int] xP = [0.0, L, L, 0.0]; /* enumeration of xcoords */
real[int] yP = [0.0, 0.0, H, H]; /* enumeration of ycoords */

int[int] nGamma = [1, H/L, 1, H/L] * NN; /* number of mesh parts on fracture, on the rest of bottom, etc. */
// int[int] nGamma = [10*1, H/L, L/L, 10*H/L] * NN; /* number of mesh parts on fracture, on the rest of bottom, etc. */

int[int] labelGamma = [labelB, labelR, labelT, labelL];

border GammaDomain(t = 0.0, 1.0; i)    /*i - number of boundary(label), t - parameter*/
{
    int iNext = (i+1) % nGamma.n;   /* .n - the length of the nGamma massive*/

    x = xP[i]*(1-t) + xP[iNext]*t;
    y = yP[i]*(1-t) + yP[iNext]*t;
    label = labelGamma[i]; /* the flag of the boundary */
}

mesh Th = buildmesh(GammaDomain(nGamma));
cout << "Old mesh   " << "Nt = " << Th.nt << "  Nv = " << Th.nv << endl;
// plot(Th, wait=1, cmm="Old mesh");
// exit(0);
Th = splitmesh(Th, 1 + 2*((x <= 1000.0)*(y <= 500.0)));
cout << "New mesh   " << "Nt = " << Th.nt << "  Nv = " << Th.nv << endl;
// plot(Th, wait=1, cmm="New mesh");

fespace Vh(Th, P2);
Vh f = sin(2*pi*x/L);

plot(Th, f, dim=2, fill=1);
real a = int2d(Th)(f^2);
cout << a << endl;
